# Set the name of the bazel workspace.
workspace(name = "build_file_generation_example")

# Load the http_archive rule so that we can have bazel download
# various rulesets and dependencies.
# The `load` statement imports the symbol for http_archive from the http.bzl
# file.  When the symbol is loaded you can use the rule.
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

######################################################################
# We need rules_go and bazel_gazelle, to build the gazelle plugin from source.
# Setup instructions for this section are at
# https://github.com/bazelbuild/bazel-gazelle#running-gazelle-with-bazel
# You may need to update the version of the rule, which is listed in the above
# documentation.
######################################################################

# Define an http_archive rule that will download the below ruleset,
# test the sha, and extract the ruleset to you local bazel cache.

http_archive(
    name = "io_bazel_rules_go",
    sha256 = "6dc2da7ab4cf5d7bfc7c949776b1b7c733f05e56edc4bcd9022bb249d2e2a996",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_go/releases/download/v0.39.1/rules_go-v0.39.1.zip",
        "https://github.com/bazelbuild/rules_go/releases/download/v0.39.1/rules_go-v0.39.1.zip",
    ],
)

# Download the bazel_gazelle ruleset.

http_archive(
    name = "bazel_gazelle",
    sha256 = "727f3e4edd96ea20c29e8c2ca9e8d2af724d8c7778e7923a854b2c80952bc405",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/bazel-gazelle/releases/download/v0.30.0/bazel-gazelle-v0.30.0.tar.gz",
        "https://github.com/bazelbuild/bazel-gazelle/releases/download/v0.30.0/bazel-gazelle-v0.30.0.tar.gz",
    ],
)

# Load rules_go ruleset and expose the toolchain and dep rules.
load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies")
load("@io_bazel_rules_go//go:deps.bzl", "go_register_toolchains", "go_rules_dependencies")

# go_rules_dependencies is a function that registers external dependencies
# needed by the Go rules.
# See: https://github.com/bazelbuild/rules_go/blob/master/go/dependencies.rst#go_rules_dependencies
go_rules_dependencies()

# go_rules_dependencies is a function that registers external dependencies
# needed by the Go rules.
# See: https://github.com/bazelbuild/rules_go/blob/master/go/dependencies.rst#go_rules_dependencies
go_register_toolchains(version = "1.19.4")

# The following call configured the gazelle dependencies, Go environment and Go SDK.
gazelle_dependencies(go_repository_default_config = "//:WORKSPACE.bazel")

###### 
# Rust setup
###### 
RULES_RUST_SHA256 =  "9d04e658878d23f4b00163a72da3db03ddb451273eb347df7d7c50838d698f49"
RULES_RUST_VERSION = "0.26.0"
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
http_archive(
    name = "rules_rust",
    sha256 = RULES_RUST_SHA256,
    urls = ["https://github.com/bazelbuild/rules_rust/releases/download/{}/rules_rust-v{}.tar.gz".format(RULES_RUST_VERSION, RULES_RUST_VERSION )],
)

load("@rules_rust//rust:repositories.bzl", "rules_rust_dependencies", "rust_register_toolchains")

rules_rust_dependencies()

RUST_VERSION="1.71.1"
rust_register_toolchains(
    edition = "2021",
    versions = [
        RUST_VERSION
    ],
)

##### Crates Universe
load("@rules_rust//crate_universe:defs.bzl", "crate", "crates_repository", "render_config")

crates_repository(
    name = "crate_index",
    cargo_lockfile = "//:Cargo.lock",
    lockfile = "//:Cargo.Bazel.lock",
    packages = {
        "num": crate.spec(
            version = "0.4.1",
        ),
        # "pyo3": crate.spec(version="0.19.2",),
    },
    # Setting the default package name to `""` forces the use of the macros defined in this repository
    # to always use the root package when looking for dependencies or aliases. This should be considered
    # optional as the repository also exposes alises for easy access to all dependencies.
    render_config = render_config(
        default_package_name = ""
    ),
)

http_archive(
    name = "pyo3-build-config",
    build_file = "//third_party/pyo3-build-config:BUILD.pyo3-build-config.bazel",
    # sha256 = "c8d748b182c8f95224336d20dcc5609598af612581ce60cfb29da4dc8d0091f2",
    strip_prefix = "pyo3-0.19.2/pyo3-build-config",
    type = "tar.gz",
    urls = ["https://github.com/PyO3/pyo3/archive/refs/tags/v0.19.2.tar.gz"],
    patches = [
        "//patches:pyo3-build-config.patch",
    ],
)

crates_repository(
    name = "pyo3_build_config_deps",
    cargo_lockfile = "//third_party/pyo3-build-config:Cargo.lock",
    manifests = ["@pyo3-build-config//:Cargo.toml"],
    generate_build_scripts=True,
    annotations = { 
            "target-lexicon": [crate.annotation(
                build_script_rustc_env = {
                    "OUT_DIR": "/tmp/rustc_out",
                    "HOST": "",
                },
                rustc_env = {
                    "HOST": "",
                },
                gen_build_script = True,
            )],
        },
)

load("@pyo3_build_config_deps//:defs.bzl", pyo3_build_config_deps = "crate_repositories")
pyo3_build_config_deps()

http_archive(
    name = "pyo3_ffi",
    build_file = "//third_party/pyo3-ffi:BUILD.pyo3-ffi.bazel",
    # sha256 = "c8d748b182c8f95224336d20dcc5609598af612581ce60cfb29da4dc8d0091f2",
    strip_prefix = "pyo3-ffi-0.19.2",
    type = "tar.gz",
    urls = ["https://crates.io/api/v1/crates/pyo3-ffi/0.19.2/download"],
    patches = [
        "//patches:pyo3-ffi.patch",
    ],
)


crates_repository(
    name = "pyo3_ffi_deps",
    cargo_lockfile = "//third_party/pyo3-ffi:Cargo.lock",
    manifests = ["@pyo3_ffi//:Cargo.toml"],
    generate_build_scripts=False,
)
load("@pyo3_ffi_deps//:defs.bzl", pyo3_ffi_deps = "crate_repositories")
pyo3_ffi_deps()

http_archive(
    name = "pyo3_macros",
    build_file = "//third_party/pyo3-macros:BUILD.pyo3-macros.bazel",
    # sha256 = "c8d748b182c8f95224336d20dcc5609598af612581ce60cfb29da4dc8d0091f2",
    strip_prefix = "pyo3-macros-0.19.2",
    type = "tar.gz",
    urls = ["https://crates.io/api/v1/crates/pyo3-macros/0.19.2/download"],
)

crates_repository(
    name = "pyo3_macros_deps",
    cargo_lockfile = "//third_party/pyo3-macros:Cargo.lock",
    manifests = ["@pyo3_macros//:Cargo.toml"],
    generate_build_scripts=True,
)
load("@pyo3_macros_deps//:defs.bzl", pyo3_macros_deps = "crate_repositories")
pyo3_macros_deps()

http_archive(
    name = "pyo3",
    build_file = "//third_party/pyo3:BUILD.pyo3.bazel",
    # sha256 = "c8d748b182c8f95224336d20dcc5609598af612581ce60cfb29da4dc8d0091f2",
    strip_prefix = "pyo3-0.19.2",
    type = "tar.gz",
    urls = ["https://crates.io/api/v1/crates/pyo3/0.19.2/download"],
    patches = [
        "//patches:pyo3.patch",
    ],
)

crates_repository(
    name = "pyo3_deps",
    cargo_lockfile = "//third_party/pyo3:Cargo.lock",
    manifests = ["@pyo3//:Cargo.toml"],
    generate_build_scripts=False,
)

load("@pyo3_deps//:defs.bzl", pyo3_deps = "crate_repositories")

pyo3_deps()

load("@crate_index//:defs.bzl", "crate_repositories")

crate_repositories()


# Remaining setup is for rules_python.

# See https://github.com/bazelbuild/rules_python/releases
RULES_PYTHON_SHA256 = "8272287b125a23bfc79650ecbbc045ebcaee4d632338b1a50aad34357bcbadce"

RULES_PYTHON_VERSION = "0.23.0"

http_archive(
    name = "rules_python",
    patch_args = ["-p1"],
    patches = [
        "//patches:rules_python_annotation.patch",
    ],
    sha256 = RULES_PYTHON_SHA256,
    strip_prefix = "rules_python-{}".format(RULES_PYTHON_VERSION),
    url = "https://github.com/bazelbuild/rules_python/archive/{}.tar.gz".format(RULES_PYTHON_VERSION),
    # url = "[https://github.com/bazelbuild/rules_python/archive/{}.tar.gz](https://github.com/bazelbuild/rules_python/archive/%7B%7D.tar.gz)".format(RULES_PYTHON_VERSION),
)

GAZELLE_SHA = "8272287b125a23bfc79650ecbbc045ebcaee4d632338b1a50aad34357bcbadce"

http_archive(
    name = "rules_python_gazelle_plugin",
    sha256 = GAZELLE_SHA,
    strip_prefix = "rules_python-{}/gazelle".format(RULES_PYTHON_VERSION),
    url = "https://github.com/bazelbuild/rules_python/releases/download/{}/rules_python-{}.tar.gz".format(RULES_PYTHON_VERSION, RULES_PYTHON_VERSION),
)

# Next we load the toolchain from rules_python.
load("@rules_python//python:repositories.bzl", "python_register_toolchains")

# We now register a hermetic Python interpreter rather than relying on a system-installed interpreter.
# This toolchain will allow bazel to download a specific python version, and use that version
# for compilation.
python_register_toolchains(
    name = "python39",
    python_version = "3.9",
)

# Load the interpreter and pip_parse rules.
load("@python39//:defs.bzl", "interpreter")
load("@rules_python//python:pip.bzl", "package_annotation", "pip_parse")


# these rules are for installing a manually built torch binary, not necessary for now.
# load("@rules_python//python/pip_install:pip_repository.bzl", "whl_library")
#
# whl_library(
#     name = "torch",
#     requirement="2.0.1",
#     repo="",
#     extra_pip_args = [
#         "--find-links",
#         "/home/oliver/torch-2.0.1+stripe.2-cp38-cp38-manylinux1_x86_64.whl",
#     ],
#     python_interpreter = interpreter,
# )

ANNOTATIONS = {
    "triton": package_annotation(
        excluded_deps = ["torch"],
    ),
}

# This macro wraps the `pip_repository` rule that invokes `pip`, with `incremental` set.
# Accepts a locked/compiled requirements file and installs the dependencies listed within.
# Those dependencies become available in a generated `requirements.bzl` file.
# You can instead check this `requirements.bzl` file into your repo.
pip_parse(
    name = "pip",
    annotations = ANNOTATIONS,
    # Generate user friendly alias labels for each dependency that we have.
    incompatible_generate_aliases = True,
    # (Optional) You can provide a python_interpreter (path) or a python_interpreter_target (a Bazel target, that
    # acts as an executable). The latter can be anything that could be used as Python interpreter. E.g.:
    # 1. Python interpreter that you compile in the build file.
    # 2. Pre-compiled python interpreter included with http_archive.
    # 3. Wrapper script, like in the autodetecting python toolchain.
    #
    # Here, we use the interpreter constant that resolves to the host interpreter from the default Python toolchain.
    python_interpreter_target = interpreter,
    # Set the location of the lock file.
    requirements_lock = "//:requirements_lock.txt",
)

# Load the install_deps macro.
load("@pip//:requirements.bzl", "install_deps")

# Initialize repositories for all packages in requirements_lock.txt.
install_deps()

# The rules_python gazelle extension has some third-party go dependencies
# which we need to fetch in order to compile it.
load("@rules_python_gazelle_plugin//:deps.bzl", _py_gazelle_deps = "gazelle_deps")

#f See: https://github.com/bazelbuild/rules_python/blob/main/gazelle/README.md
# This rule loads and compiles various go dependencies that running gazelle
# for python requirements.
_py_gazelle_deps()
